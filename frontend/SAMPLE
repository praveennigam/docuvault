// import { useState, useEffect } from "react";
// import "./ReferenceDocumentForm.css";

// export default function ReferenceDocumentForm({
//   category,
//   setCategory,
//   documents,
//   selectedDocs,
//   setSelectedDocs,
//   onSave,
//   clonedDoc,
// }) {
//   const [label, setLabel] = useState("");
//   const [conditions, setConditions] = useState([]);
//   const [openDocIndex, setOpenDocIndex] = useState(null);

//   // Load cloned document
//   useEffect(() => {
//     if (clonedDoc) {
//       setSelectedDocs([
//         ...selectedDocs,
//         {
//           document: clonedDoc.document,
//           fields: clonedDoc.requiredFields.map((f) => ({ ...f })),
//         },
//       ]);
//       setLabel(clonedDoc.label);
//       setConditions(clonedDoc.conditions || []);
//       setOpenDocIndex(selectedDocs.length);
//     }
//   }, [clonedDoc]);

//   // Add a new document
//   const handleAddDocument = (docId) => {
//     if (selectedDocs.some((d) => d.document._id === docId)) return;

//     const doc = documents.find((d) => d._id === docId);
//     if (!doc) return;

//     setSelectedDocs([
//       ...selectedDocs,
//       { document: doc, fields: doc.fields.map((f) => ({ ...f, required: false })) },
//     ]);
//     setOpenDocIndex(selectedDocs.length);
//   };

//   // Toggle required field
//   const toggleField = (docIndex, fieldIndex) => {
//     const updated = [...selectedDocs];
//     updated[docIndex].fields[fieldIndex].required = !updated[docIndex].fields[fieldIndex].required;
//     setSelectedDocs(updated);
//   };

//   // Remove document
//   const removeDocument = (docIndex) => {
//     const updated = [...selectedDocs];
//     updated.splice(docIndex, 1);
//     setSelectedDocs(updated);
//     if (openDocIndex === docIndex) setOpenDocIndex(null);
//   };

//   // Conditions handlers
//   const addCondition = () => setConditions([...conditions, { value: "" }]);
//   const updateCondition = (index, value) => {
//     const updated = [...conditions];
//     updated[index].value = value;
//     setConditions(updated);
//   };
//   const removeCondition = (index) => {
//     const updated = [...conditions];
//     updated.splice(index, 1);
//     setConditions(updated);
//   };

//   return (
//     <div className="reference-form">
//       {/* Category selector */}
//       <div className="selector-group">
//         <label>Category:</label>
//         <select value={category} onChange={(e) => setCategory(e.target.value)}>
//           <option value="">-- Select --</option>
//           <option value="HR">HR</option>
//           <option value="FINANCE">FINANCE</option>
//           <option value="HEALTHCARE">HEALTHCARE</option>
//           <option value="AGRICULTURE">AGRICULTURE</option>
//           <option value="INDIAN GOVT OFFICER">INDIAN GOVT OFFICER</option>
//         </select>
//       </div>

//       {/* Label & document selector */}
//       {category && (
//         <div className="selector-group">
//           <input
//             type="text"
//             placeholder="Enter label"
//             value={label}
//             onChange={(e) => setLabel(e.target.value)}
//           />
//           <select onChange={(e) => handleAddDocument(e.target.value)} defaultValue="">
//             <option value="">-- Select Document --</option>
//             {documents.map((d) => (
//               <option
//                 key={d._id}
//                 value={d._id}
//                 disabled={selectedDocs.some((sd) => sd.document._id === d._id)}
//               >
//                 {d.type}
//               </option>
//             ))}
//           </select>
//         </div>
//       )}

//       {/* Selected Documents */}
//       {selectedDocs.length > 0 && (
//         <div className="documents-wrapper">
//           {selectedDocs.map((docObj, docIndex) => {
//             const isOpen = openDocIndex === docIndex;
//             const selectedFields = docObj.fields.filter((f) => f.required);

//             return (
//               <div className={`document-card ${isOpen ? "open" : "collapsed"}`} key={docObj.document._id}>
//                 <div
//                   className="document-header"
//                   onClick={() => setOpenDocIndex(isOpen ? null : docIndex)}
//                 >
//                   <h4>{docObj.document.type}</h4>
//                   {selectedFields.length > 0 && !isOpen && (
//                     <span className="preview">{selectedFields.map(f => f.label).join(", ")}</span>
//                   )}
//                   <button
//                     className="remove-doc-btn"
//                     onClick={(e) => { e.stopPropagation(); removeDocument(docIndex); }}
//                   >
//                     ✕
//                   </button>
//                 </div>

//                 {isOpen && (
//                   <div className="fields-section">
//                     {docObj.fields.map((f, i) => (
//                       <div className="field-item" key={f.key}>
//                         <input
//                           type="checkbox"
//                           checked={f.required}
//                           onChange={() => toggleField(docIndex, i)}
//                         />
//                         <span>{f.label}</span>
//                       </div>
//                     ))}
//                   </div>
//                 )}
//               </div>
//             );
//           })}
//         </div>
//       )}

//       {/* Shared Conditions */}
//       {selectedDocs.length > 0 && (
//         <div className="conditions-wrapper">
//           <h4>Conditions</h4>
//           {conditions.map((c, index) => (
//             <div className="condition-item" key={index}>
//               <textarea
//                 placeholder="Enter condition"
//                 value={c.value}
//                 onChange={(e) => updateCondition(index, e.target.value)}
//               />
//               <button type="button" className="remove-btn" onClick={() => removeCondition(index)}>✕</button>
//             </div>
//           ))}
//           <button type="button" className="add-condition-btn" onClick={addCondition}>+ Add Condition</button>
//         </div>
//       )}

//       {/* Save button */}
//       {label && selectedDocs.length > 0 && (
//         <button
//           type="button"
//           className="save-btn"
//           onClick={() => onSave({ label, category, selectedDocs, conditions })}
//         >
//           Save Documents
//         </button>
//       )}
//     </div>
//   );
// }




// import { useState, useEffect } from "react";
// import "./ReferenceDocumentForm.css";

// export default function ReferenceDocumentForm({
//   category,
//   setCategory,
//   documents,
//   selectedDocs,
//   setSelectedDocs,
//   onSave,
//   clonedDoc,
// }) {
//   const [label, setLabel] = useState("");
//   const [conditions, setConditions] = useState([]);
//   const [openDocIndex, setOpenDocIndex] = useState(null);

//   // Load cloned document
//   useEffect(() => {
//     if (clonedDoc) {
//       setSelectedDocs([
//         ...selectedDocs,
//         {
//           document: clonedDoc.document,
//           fields: clonedDoc.requiredFields.map((f) => ({ ...f })),
//         },
//       ]);
//       setLabel(clonedDoc.label);
//       setConditions(clonedDoc.conditions || []);
//       setOpenDocIndex(selectedDocs.length);
//     }
//   }, [clonedDoc]);

//   // Add a new document
//   const handleAddDocument = (docId) => {
//     if (selectedDocs.some((d) => d.document._id === docId)) return;
//     const doc = documents.find((d) => d._id === docId);
//     if (!doc) return;

//     setSelectedDocs([
//       ...selectedDocs,
//       { document: doc, fields: doc.fields.map((f) => ({ ...f, required: false })) },
//     ]);
//     setOpenDocIndex(selectedDocs.length);
//   };

//   // Toggle required field
//   const toggleField = (docIndex, fieldIndex) => {
//     const updated = [...selectedDocs];
//     updated[docIndex].fields[fieldIndex].required = !updated[docIndex].fields[fieldIndex].required;
//     setSelectedDocs(updated);
//   };

//   // Remove document
//   const removeDocument = (docIndex) => {
//     const updated = [...selectedDocs];
//     updated.splice(docIndex, 1);
//     setSelectedDocs(updated);
//     if (openDocIndex === docIndex) setOpenDocIndex(null);
//   };

//   // Conditions handlers
//   const addCondition = () => setConditions([...conditions, { value: "" }]);
//   const updateCondition = (index, value) => {
//     const updated = [...conditions];
//     updated[index].value = value;
//     setConditions(updated);
//   };
//   const removeCondition = (index) => {
//     const updated = [...conditions];
//     updated.splice(index, 1);
//     setConditions(updated);
//   };

//   return (
//     <div className="reference-form">
//       {/* Category selector */}
//       <div className="selector-group">
//         <label>Category:</label>
//         <select value={category} onChange={(e) => setCategory(e.target.value)}>
//           <option value="">-- Select --</option>
//           <option value="HR">HR</option>
//           <option value="FINANCE">FINANCE</option>
//           <option value="HEALTHCARE">HEALTHCARE</option>
//           <option value="AGRICULTURE">AGRICULTURE</option>
//           <option value="INDIAN GOVT OFFICER">INDIAN GOVT OFFICER</option>
//         </select>
//       </div>

//       {/* Label & document selector */}
//       {category && (
//         <div className="selector-group">
//           <input
//             type="text"
//             placeholder="Enter label"
//             value={label}
//             onChange={(e) => setLabel(e.target.value)}
//           />
//           <select onChange={(e) => handleAddDocument(e.target.value)} defaultValue="">
//             <option value="">-- Select Document --</option>
//             {documents.map((d) => (
//               <option
//                 key={d._id}
//                 value={d._id}
//                 disabled={selectedDocs.some((sd) => sd.document._id === d._id)}
//               >
//                 {d.type}
//               </option>
//             ))}
//           </select>
//         </div>
//       )}

//       {/* Selected Documents */}
//       {selectedDocs.length > 0 && (
//         <div className="documents-wrapper">
//           {selectedDocs.map((docObj, docIndex) => {
//             const isOpen = openDocIndex === docIndex;
//             const selectedFields = docObj.fields.filter((f) => f.required);

//             return (
//               <div className={`document-card ${isOpen ? "open" : "collapsed"}`} key={docObj.document._id}>
//                 <div className="document-header" onClick={() => setOpenDocIndex(isOpen ? null : docIndex)}>
//                   <h4>{docObj.document.type}</h4>
//                   {selectedFields.length > 0 && !isOpen && (
//                     <span className="preview">{selectedFields.map(f => f.label).join(", ")}</span>
//                   )}
//                   <button className="remove-doc-btn" onClick={(e) => { e.stopPropagation(); removeDocument(docIndex); }}>✕</button>
//                 </div>

//                 {isOpen && (
//                   <div className="fields-section">
//                     {docObj.fields.map((f, i) => (
//                       <div className="field-item" key={f.key}>
//                         <input type="checkbox" checked={f.required} onChange={() => toggleField(docIndex, i)} />
//                         <span>{f.label}</span>
//                       </div>
//                     ))}
//                   </div>
//                 )}
//               </div>
//             );
//           })}
//         </div>
//       )}

//       {/* Shared Conditions */}
//       {selectedDocs.length > 0 && (
//         <div className="conditions-wrapper">
//           <h4>Conditions</h4>
//           {conditions.map((c, index) => (
//             <div className="condition-item" key={index}>
//               <textarea placeholder="Enter condition" value={c.value} onChange={(e) => updateCondition(index, e.target.value)} />
//               <button type="button" className="remove-btn" onClick={() => removeCondition(index)}>✕</button>
//             </div>
//           ))}
//           <button type="button" className="add-condition-btn" onClick={addCondition}>+ Add Condition</button>
//         </div>
//       )}

//       {/* Save button */}
//       {label && selectedDocs.length > 0 && (
//         <button type="button" className="save-btn" onClick={() => onSave({ label, category, selectedDocs, conditions })}>
//           Save Documents
//         </button>
//       )}
//     </div>
//   );
// }